{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-auth\\\\client\\\\src\\\\components\\\\StripePay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport UserContext from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripePay = ({\n  total\n}) => {\n  _s();\n  const {\n    authUser\n  } = useContext(UserContext);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [clientSecret, setClientSecret] = useState('');\n  const [name, setName] = useState('');\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        const response = await axios.post('http://localhost:5000/api/create-payment-intent', {\n          amount: total\n        });\n        setClientSecret(response.data.clientSecret);\n      } catch (error) {\n        console.error('Error creating payment intent:', error);\n      }\n    };\n    if (total > 0) {\n      createPaymentIntent();\n    }\n  }, [total]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: name\n        }\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed: ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setSucceeded(true);\n      setProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || succeeded,\n      children: processing ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), succeeded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Payment succeeded!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(StripePay, \"jgezfOEvbSVnPMlzRjJesJ4c0IY=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = StripePay;\nexport default StripePay;\nvar _c;\n$RefreshReg$(_c, \"StripePay\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","CardElement","useStripe","useElements","UserContext","jsxDEV","_jsxDEV","StripePay","total","_s","authUser","stripe","elements","error","setError","succeeded","setSucceeded","processing","setProcessing","clientSecret","setClientSecret","name","setName","createPaymentIntent","response","post","amount","data","console","handleSubmit","event","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","message","onSubmit","children","type","value","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["C:/react-auth/client/src/components/StripePay.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport UserContext from '../context/UserContext';\r\n\r\nconst StripePay = ({ total }) => {\r\n  const { authUser } = useContext(UserContext);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [error, setError] = useState(null);\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  useEffect(() => {\r\n    const createPaymentIntent = async () => {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/create-payment-intent', { amount: total });\r\n        setClientSecret(response.data.clientSecret);\r\n      } catch (error) {\r\n        console.error('Error creating payment intent:', error);\r\n      }\r\n    };\r\n\r\n    if (total > 0) {\r\n      createPaymentIntent();\r\n    }\r\n  }, [total]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (payload.error) {\r\n      setError(`Payment failed: ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setSucceeded(true);\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n      <CardElement />\r\n      <button disabled={processing || succeeded}>\r\n        {processing ? 'Processing...' : 'Pay Now'}\r\n      </button>\r\n      {error && <div>{error}</div>}\r\n      {succeeded && <div>Payment succeeded!</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default StripePay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}