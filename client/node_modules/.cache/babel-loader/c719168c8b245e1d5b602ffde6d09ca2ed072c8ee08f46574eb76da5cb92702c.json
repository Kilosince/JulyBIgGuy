{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-auth\\\\client\\\\src\\\\components\\\\StripePay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport UserContext from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripePay = ({\n  total\n}) => {\n  _s();\n  const {\n    authUser\n  } = useContext(UserContext);\n  const stripe = useStripe();\n  const elements = useElements();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [clientSecret, setClientSecret] = useState('');\n  const [name, setName] = useState('');\n  const [cart, setCart] = useState([]);\n  useEffect(() => {\n    const fetchCartData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/cart`);\n        if (response.status === 200) {\n          setCart(response.data.cart);\n        } else {\n          console.error('Error fetching cart data: status', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching cart data:', error);\n      }\n    };\n    const createPaymentIntent = async () => {\n      try {\n        // Convert total to cents and round to nearest integer\n        const amountInCents = Math.round(total * 100);\n        const response = await axios.post('http://localhost:5000/api/create-payment-intent', {\n          amount: amountInCents\n        });\n        setClientSecret(response.data.clientSecret);\n      } catch (error) {\n        console.error('Error creating payment intent:', error);\n      }\n    };\n    if (total > 0) {\n      fetchCartData();\n      createPaymentIntent();\n    }\n  }, [total, authUser]);\n  const generateRandomString = (length = 8) => {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n  const generateRandomOrderNumber = () => {\n    return Math.floor(Math.random() * 500) + 1;\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: name\n        }\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed: ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setSucceeded(true);\n      setProcessing(false);\n      const mainkey = generateRandomString();\n      const timestamp = new Date().toLocaleString('en-US', {\n        timeZone: 'America/Los_Angeles'\n      }); // Convert to PST\n      const orderNumber = generateRandomOrderNumber(); // Generate order number on the frontend\n\n      const groupedCartItems = cart.reduce((acc, item) => {\n        const storeOwnerId = item.storeId.split('-')[0];\n        if (!acc[storeOwnerId]) {\n          acc[storeOwnerId] = [];\n        }\n        acc[storeOwnerId].push(item);\n        return acc;\n      }, {});\n      for (const [storeOwnerId, items] of Object.entries(groupedCartItems)) {\n        const newOrder = {\n          items,\n          mainkey,\n          timestamp,\n          ccname: name,\n          cartTotal: items.reduce((total, item) => total + item.price * item.quantity, 0),\n          orderNumber,\n          // Include the generated order number\n          PatronId: authUser._id // Include the PatronId\n        };\n\n        // Send order to store owner\n        await axios.post(`http://localhost:5000/api/users/${storeOwnerId}/orders`, newOrder);\n\n        // Send order to patron's patronOrders array\n        await axios.post(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/patronOrders`, newOrder);\n\n        // Send email to the user\n        await axios.post('http://localhost:5000/api/send-purchase-email', {\n          email: authUser.email,\n          storeName: items[0].storeName,\n          // Assuming storeName is available in the item data\n          ccName: name,\n          cartTotal: newOrder.cartTotal,\n          items: newOrder.items.map(item => ({\n            itemName: item.itemName,\n            price: item.price,\n            quantity: item.quantity\n          })),\n          // Ensure only necessary item details are sent\n          timestamp: timestamp\n        });\n      }\n      await axios.delete(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/cart/clear`);\n      navigate('/');\n      setName('');\n      elements.getElement(CardElement).clear();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || succeeded,\n      children: processing ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this), succeeded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Payment succeeded!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(StripePay, \"tKLEBj1OA/9xqoFAVYgikDS31cs=\", false, function () {\n  return [useStripe, useElements, useNavigate];\n});\n_c = StripePay;\nexport default StripePay;\nvar _c;\n$RefreshReg$(_c, \"StripePay\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","useNavigate","CardElement","useStripe","useElements","UserContext","jsxDEV","_jsxDEV","StripePay","total","_s","authUser","stripe","elements","navigate","error","setError","succeeded","setSucceeded","processing","setProcessing","clientSecret","setClientSecret","name","setName","cart","setCart","fetchCartData","response","get","encodeURIComponent","_id","status","data","console","createPaymentIntent","amountInCents","Math","round","post","amount","generateRandomString","length","characters","result","charactersLength","i","charAt","floor","random","generateRandomOrderNumber","handleSubmit","event","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","message","mainkey","timestamp","Date","toLocaleString","timeZone","orderNumber","groupedCartItems","reduce","acc","item","storeOwnerId","storeId","split","push","items","Object","entries","newOrder","ccname","cartTotal","price","quantity","PatronId","email","storeName","ccName","map","itemName","delete","clear","onSubmit","children","type","value","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["C:/react-auth/client/src/components/StripePay.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport UserContext from '../context/UserContext';\r\n\r\nconst StripePay = ({ total }) => {\r\n  const { authUser } = useContext(UserContext);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [cart, setCart] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCartData = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/cart`);\r\n        if (response.status === 200) {\r\n          setCart(response.data.cart);\r\n        } else {\r\n          console.error('Error fetching cart data: status', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching cart data:', error);\r\n      }\r\n    };\r\n\r\n    const createPaymentIntent = async () => {\r\n      try {\r\n        // Convert total to cents and round to nearest integer\r\n        const amountInCents = Math.round(total * 100);\r\n        const response = await axios.post('http://localhost:5000/api/create-payment-intent', { amount: amountInCents });\r\n        setClientSecret(response.data.clientSecret);\r\n      } catch (error) {\r\n        console.error('Error creating payment intent:', error);\r\n      }\r\n    };\r\n\r\n    if (total > 0) {\r\n      fetchCartData();\r\n      createPaymentIntent();\r\n    }\r\n  }, [total, authUser]);\r\n\r\n  const generateRandomString = (length = 8) => {\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const generateRandomOrderNumber = () => {\r\n    return Math.floor(Math.random() * 500) + 1;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (payload.error) {\r\n      setError(`Payment failed: ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setSucceeded(true);\r\n      setProcessing(false);\r\n\r\n      const mainkey = generateRandomString();\r\n      const timestamp = new Date().toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }); // Convert to PST\r\n      const orderNumber = generateRandomOrderNumber(); // Generate order number on the frontend\r\n\r\n      const groupedCartItems = cart.reduce((acc, item) => {\r\n        const storeOwnerId = item.storeId.split('-')[0];\r\n        if (!acc[storeOwnerId]) {\r\n          acc[storeOwnerId] = [];\r\n        }\r\n        acc[storeOwnerId].push(item);\r\n        return acc;\r\n      }, {});\r\n\r\n      for (const [storeOwnerId, items] of Object.entries(groupedCartItems)) {\r\n        const newOrder = {\r\n          items,\r\n          mainkey,\r\n          timestamp,\r\n          ccname: name,\r\n          cartTotal: items.reduce((total, item) => total + item.price * item.quantity, 0),\r\n          orderNumber, // Include the generated order number\r\n          PatronId: authUser._id // Include the PatronId\r\n        };\r\n\r\n        // Send order to store owner\r\n        await axios.post(`http://localhost:5000/api/users/${storeOwnerId}/orders`, newOrder);\r\n\r\n        // Send order to patron's patronOrders array\r\n        await axios.post(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/patronOrders`, newOrder);\r\n\r\n        // Send email to the user\r\n        await axios.post('http://localhost:5000/api/send-purchase-email', {\r\n          email: authUser.email,\r\n          storeName: items[0].storeName, // Assuming storeName is available in the item data\r\n          ccName: name,\r\n          cartTotal: newOrder.cartTotal,\r\n          items: newOrder.items.map(item => ({\r\n            itemName: item.itemName,\r\n            price: item.price,\r\n            quantity: item.quantity,\r\n          })), // Ensure only necessary item details are sent\r\n          timestamp: timestamp,\r\n        });\r\n      }\r\n\r\n      await axios.delete(`http://localhost:5000/api/users/${encodeURIComponent(authUser._id)}/cart/clear`);\r\n\r\n      navigate('/');\r\n\r\n      setName('');\r\n      elements.getElement(CardElement).clear();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n      <CardElement />\r\n      <button disabled={processing || succeeded}>\r\n        {processing ? 'Processing...' : 'Pay Now'}\r\n      </button>\r\n      {error && <div>{error}</div>}\r\n      {succeeded && <div>Payment succeeded!</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default StripePay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}